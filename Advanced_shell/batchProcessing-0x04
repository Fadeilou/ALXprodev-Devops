#!/bin/bash
# This script fetches data for multiple Pokémon in parallel using background processes,
# with proper cleanup of background processes on exit.

POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
OUTPUT_DIR="pokemon_data"
mkdir -p "$OUTPUT_DIR"
BASE_URL="https://pokeapi.co/api/v2/pokemon/"

# Array to hold the PIDs of background processes.
pids=()

# Cleanup function to be called on script interruption.
cleanup() {
    # Disable the trap to prevent potential recursion.
    trap - INT TERM
    echo -e "\\nScript interrupted. Cleaning up background processes..."
    # kill all background processes whose PIDs are in the pids array.
    for pid in "${pids[@]}"; do
        # Use kill -0 to check if the process exists before trying to kill it.
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid"
        fi
    done
    # A final wait to ensure all children are reaped.
    wait
    exit 1
}

# Set up a trap to call the cleanup function on these signals.
trap cleanup INT TERM

# A function to encapsulate the logic for fetching a single Pokémon.
fetch_pokemon() {
    local pokemon_name=$1
    
    echo "Fetching data for $pokemon_name..."
    
    local API_URL="$BASE_URL$pokemon_name"
    local OUTPUT_FILE="$OUTPUT_DIR/${pokemon_name}.json"
    
    # Fetch data. No retry logic is specified for this parallel task.
    if curl -s -f "$API_URL" -o "$OUTPUT_FILE"; then
        echo "Saved data to $OUTPUT_FILE ✅"
    else
        # Log error to stderr
        echo "Failed to fetch data for $pokemon_name. ❌" >&2
        # Clean up empty file on failure
        rm -f "$OUTPUT_FILE"
    fi
}

# Loop through the list of Pokémon.
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon "$pokemon" &
    # Store the PID of the last backgrounded process.
    pids+=($!)
done

# Wait for all background jobs to complete.
echo "Waiting for all Pokémon data to be fetched..."
wait

echo "All parallel fetch operations are complete."

# Disable the trap on a normal, successful exit.
trap - INT TERM 